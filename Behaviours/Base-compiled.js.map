{"version":3,"sources":["Base.js"],"names":[],"mappings":";;;;;;IAAM,IAAI;AACK,aADT,IAAI,CACM,OAAO,EAAE;;;8BADnB,IAAI;;AAEF,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;AAEvB,YAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;AACxB,gBAAI,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;AACjD,+BAAmB,CAAC,OAAO,CAAC,UAAC,cAAc,EAAI;AAC3C,oBAAI,IAAI,GAAG,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AAC/C,oBAAI,EAAE,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC3C,oBAAI,IAAI,GAAG,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AAC/C,oBAAI,MAAM,GAAG,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;;AAEnD,sBAAK,IAAI,CAAC,GAAG,EAAE,CAAC;AAChB,oBAAI,MAAM,EAAE;AACR,wBAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC9B,wBAAI,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AACtC,0BAAM,CAAC,KAAK,QAAO,UAAU,CAAC,CAAC;iBAClC;aACJ,CAAC,CAAC;SACN;;AAED,YAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,EAAE;AACjE,gBAAI,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AAClE,gBAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACxC;KAEJ;;iBA1BC,IAAI;;eA4BI,oBAAC,WAAW,EAAE;AACpB,gBAAI,IAAI,CAAC,UAAU,EAAE;AACjB,oBAAI,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEvE,2BAAW,CAAC,OAAO,CAAC,UAAC,iBAAiB,EAAI;AACtC,wBAAI,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AACpD,kCAAc,CAAC,OAAO,CAAC,UAAC,SAAS,EAAK;AAClC,4BAAI,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;AACjD,4BAAI,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;AACrD,uCAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,YAAK;AAC3D,kCAAM,CAAC,UAAU,CAAC,CAAC;yBACtB,CAAC,CAAC;qBACN,CAAC,CAAC;iBACN,CAAC,CAAC;aACN;SACJ;;;WA3CC,IAAI","file":"Base-compiled.js","sourcesContent":["class Base {\n    constructor(options) {\n        this.options = options;\n\n        if (this.options.reflector) {\n            let reflectorCollection = this.options.reflector;\n            reflectorCollection.forEach((reflectorModel)=> {\n                let type = reflectorModel.exposeObject['type'];\n                let as = reflectorModel.exposeObject['as'];\n                let name = reflectorModel.exposeObject['name'];\n                let invoke = reflectorModel.exposeObject['invoke'];\n\n                this[name] = as;\n                if (invoke) {\n                    let method = invoke['method'];\n                    let parameters = invoke['parameters'];\n                    method.apply(this, parameters);\n                }\n            });\n        }\n\n        if (this.options.events && this.constructor.prototype.createElement) {\n            this.constructor.prototype.createElement.call(this, this.options);\n            this.bindEvents(this.options.events);\n        }\n\n    }\n\n    bindEvents(eventObject) {\n        if (this.getElement) {\n            var elementToBindTo = this.constructor.prototype.getElement.call(this);\n\n            eventObject.forEach((singleEventObject)=> {\n                let eventNameArray = Object.keys(singleEventObject);\n                eventNameArray.forEach((eventName) => {\n                    var method = singleEventObject[eventName].method;\n                    var parameters = singleEventObject[eventName].params;\n                    elementToBindTo.addEventListener(eventName.toLowerCase(), ()=> {\n                        method(parameters);\n                    });\n                });\n            });\n        }\n    }\n}"]}