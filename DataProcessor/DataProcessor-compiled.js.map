{"version":3,"sources":["DataProcessor.js"],"names":[],"mappings":";;;;;;IAAM,aAAa;AACJ,aADT,aAAa,CACH,OAAO,EAAE;8BADnB,aAAa;;AAEX,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;AAC1C,YAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;AACpC,YAAI,CAAC,OAAO,GAAG,IAAI,CAAC;KACvB;;iBANC,aAAa;;eASR,mBAAG;AACN,mBAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SAEjD;;;eAEG,gBAAG;;;AACH,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,EAAI;AACrC,oBAAI,MAAM,YAAA,CAAC;AACX,oBAAI,MAAK,OAAO,EAAE;AACd,0BAAM,GAAG,MAAK,gBAAgB,CAAC,CAAC,CAAC,GAAG,MAAK,gBAAgB,CAAC,CAAC,CAAC,CAAA;iBAC/D,MAAM;AACH,0BAAM,GAAG,MAAK,gBAAgB,CAAC,CAAC,CAAC,GAAG,MAAK,gBAAgB,CAAC,CAAC,CAAC,CAAA;iBAC/D;AACD,uBAAO,MAAM,CAAC;aACjB,CAAC,CAAC;;AAEH,gBAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;;AAE7B,gBAAI,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;AACxC,gBAAI,UAAU,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;AAC5C,kBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;;AAEnC,mBAAO,IAAI,CAAC;SACf;;;eAEe,0BAAC,GAAG,EAAE;AAClB,mBAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;SAC1C;;;eAGQ,qBAAG;AACR,gBAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;AACjD,uBAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAA;aAClC,MAAM;AACH,uBAAO,EAAC,MAAM,EAAE,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAA;aACjD;SACJ;;;;;;;;;;;;;AAAA;;WA7CC,aAAa","file":"DataProcessor-compiled.js","sourcesContent":["class DataProcessor {\n    constructor(options) {\n        this.options = options;\n        this.dataSource = this.options.dataSource;\n        this.sortKey = this.options.sortKey;\n        this.sortDir = true;\n    }\n\n\n    getData() {\n        return this.data || this.dataSource.getData();\n\n    }\n\n    sort() {\n        this.data = this.getData().sort((l, r)=> {\n            let result;\n            if (this.sortDir) {\n                result = this.processStringVal(l) < this.processStringVal(r)\n            } else {\n                result = this.processStringVal(l) > this.processStringVal(r)\n            }\n            return result;\n        });\n        \n        this.sortDir = !this.sortDir;\n\n        let method = this.getOnSort()['method'];\n        let parameters = this.getOnSort()['params'];\n        method.apply(method, [parameters]);\n        \n        return this;\n    }\n\n    processStringVal(obj) {\n        return obj[this.sortKey].toLowerCase();\n    }\n\n\n    getOnSort() {\n        if (this.options.events && this.options.events.sort) {\n            return this.options.events.sort\n        } else {\n            return {method: console.log, params: 'sorted'}\n        }\n    }\n\n    /*\n     sortByKey(options) {\n     let keyDirection = this.sortDirection;\n     this.sortDirection = !this.sortDirection;\n\n     let dataClone = this.dataSource.slice(0);\n     if (keyDirection) {\n\n     } else {\n\n     }\n\n     return dataClone;\n     }*/\n\n}"]}